/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
  version     2.0;
  format      ascii;
  class       dictionary;
  object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "meshdata"

// Which of the steps to run
castellatedMesh false;
snap            false;
addLayers       true;


geometry
{
  // sphere.stl // STL filename
  // {
  //   type triSurfaceMesh;
  //   regions
  //   {
  //     // secondSolid             // Named region in the STL file
  //     // {
  //     //   name mySecondPatch; // User-defined patch name
  //     // }                       // otherwise given sphere.stl_secondSolid
  //   }
  // }
  // sphere
  // {
  //   type searchableSphere;
  //   centre  (0 0 0);
  //   radius  0.6180;
  // }
  // plane
  // {
  //   type            searchablePlane;
  //   planeType       pointAndNormal;

  //   pointAndNormalDict
  //   {
  //     basePoint       (0 #eval {$R - $H_G} 0);
  //     normal          (0 1 0);
  //   }
  // }
};

castellatedMeshControls
{
  maxLocalCells 10000;
  maxGlobalCells 200000;
  minRefinementCells 0;
  maxLoadUnbalance 0.10;
  nCellsBetweenLevels 2;
  features
    (
    );
  refinementSurfaces
  {

    sphere
    {
      level ( 2 2 );
      // Directional refinement
      // - for all cells with uniform level 0-1
      // - do one split in y and z direction.
      // Directional expansion-ratio
      // patchInfo {
      //     type wall;
      // }
    }
    plane
    {
      level ( 2 2 );
    }

  }

  resolveFeatureAngle 30;

  refinementRegions
  {

//     plane
//     	{
//     		mode distance;
//     		levels ((0.024 1));
//     	}
//     sphere
//     {
//       mode distance;
//       levels ((0.024 1));
//     }

  }

  // refinementRegions
  // {

  //     // sphere.stl
  //     // {                             // refinement level 5 within 1.0 m
  //     //     mode distance;            // refinement level 3 within 2.0 m
  //     //     levels ((0.02 2) (0.04 1)); // levels must be ordered nearest first
  //     // }
  // }

  locationInMesh (0.01 0.59 0.02);
  allowFreeStandingZoneFaces true;
  // useTopologicalSnapDetection false;
}


snapControls
{
  nSmoothPatch    3;
  nSmoothInternal $nSmoothPatch;
  tolerance       2.0;
  nSolveIter      30;
  nRelaxIter      5;

  // Feature snapping

  nFeatureSnapIter 10;
  implicitFeatureSnap true;
  explicitFeatureSnap false;
  multiRegionFeatureSnap false;
}

// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes false;

    // Per final patch (so not geometry!) :the layer information
    layers
    {
        "(walls|outlet)"
        // bottom
        {
            nSurfaceLayers 1;
        }
    }

    meshShrinker    displacementMotionSolver;

    solver          displacementLaplacian;

    displacementLaplacianCoeffs
    {
        diffusivity     quadratic inverseDistance 1(wall);
    }

    // Expansion factor for layer mesh
    expansionRatio 1.0;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness 3e-3;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.0001;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    nGrow 0;


    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 60;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 3;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 2;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 5.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    minMedialAxisAngle 90;

    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;

    // Overall max number of layer addition iterations
    nLayerIter 50;
    // Overall max number of layer addition iterations
    nLayerIter      25;

    // Add layers in multiple passes - gives layers a chance to rotate
    nOuterIter      4;


    // meshShrinker    displacementMotionSolver;
    // solver          displacementLaplacian;
    // displacementLaplacianCoeffs
    // {
    //     diffusivity quadratic inverseDistance (plane);
    // }
}


meshQualityControls
{
  maxNonOrtho 65;
  maxBoundarySkewness 20;
  maxInternalSkewness 4;
  maxConcave 80;
  minVol 1e-250;
  minTetQuality 1e-25;
  minArea -1;
  minTwist 0.05;
  minDeterminant 0.001;
  minFaceWeight 0.05;
  minVolRatio 0.1e-1;
  minTriangleTwist -1;

  nSmoothScale 4;
  errorReduction 0.75;

  relaxed
  {
    maxNonOrtho 75;
  }
}

debug 0;
mergeTolerance 1e-7;

// ************************************************************************* //
